version: '3'

networks:
  kafka-connect-net:
    driver: bridge

services:

### KAFKA CONFIGURATION ###
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.4
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - kafka-connect-net

  kafka:
    image: confluentinc/cp-kafka:7.6.4
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "${ZOOKEEPER_CONNECT}"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9001
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    networks:
      - kafka-connect-net

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.6.4
    hostname: kafka-schema-registry
    container_name: kafka-schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://${kafka}:19092
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zookeeper
      - kafka
    networks:
      - kafka-connect-net

  connect:
    image: confluentinc/cp-kafka-connect:7.6.4
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper
      - kafka
      - kafka-schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: '${KAFKA_BOOTSTRAP_SERVERS}'
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: connect 
      CONNECT_GROUP_ID: connect-iceberg-group
      CONNECT_CONFIG_STORAGE_TOPIC: iceberg-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: iceberg-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: iceberg-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: '${SCHEMA_REGISTRY_URL}'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: '${SCHEMA_REGISTRY_URL}'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: '${ZOOKEEPER_CONNECT}'
      CONNECT_PLUGIN_PATH: '/etc/kafka-connect/jars/'
      CONTROL_CENTER_INTERNAL: "control-center:9021"
      CONNECT_AUTO_RESET_OFFSET: "latest"
    volumes:
      - ./iceberg-sink-plugin/distributions:/etc/kafka-connect/jars
    networks:
      - kafka-connect-net

### APACHE ICEBERG CONFIGURATION ###
  spark-iceberg:
    container_name: spark-iceberg
    build:
      context: ./spark
    image: spark-iceberg:latest
    networks:
      - kafka-connect-net
    depends_on:
      - rest
      - minio
    volumes:
      - ./spark/warehouse:/home/iceberg/warehouse
      - ./spark/notebooks:/home/iceberg/notebooks/notebooks
      - ./spark/connectors:/home/iceberg/notebooks/connectors
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001

### MINIO CONFIGURATION ###
  minio:
    image: minio/minio
    hostname: minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
      MINIO_DOMAIN: minio
    networks:
      - kafka-connect-net
    volumes:
      - ./data/minio:/data
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]

### AWS CLI CREATE BUCKET ###
  aws:
    image: amazon/aws-cli
    container_name: aws-cli
    command: |
      -c "sleep 5 && \
      aws --endpoint-url http://minio:9000 s3 mb s3://warehouse --region ${AWS_REGION} || exit 0"
    entrypoint: [/bin/bash]
    environment: 
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
    networks:
      - kafka-connect-net
    depends_on: 
      - minio

### APACHE ICEBERG REST CATALOG ###
  rest:
    image: tabulario/iceberg-rest
    hostname: rest
    container_name: rest
    networks:
      - kafka-connect-net
    volumes:
      - ./data/iceberg-rest:/var/lib/iceberg-rest
    ports:
      - 8181:8181
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      CATALOG_WAREHOUSE: ${CATALOG_WAREHOUSE}
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_ENDPOINT: ${CATALOG_S3_ENDPOINT}
      CATALOG_S3_PATH__STYLE__ACCESS: ${CATALOG_S3_PATH_STYLE_ACCESS}

### PRODUCER SERVICE ###
  producer:
    build:
      context: ./producer-kafka
    container_name: producer
    depends_on:
      - kafka
      - kafka-schema-registry
    environment:
      - BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - SCHEMA_REGISTRY_URL=${SCHEMA_REGISTRY_URL}
      - NUMBER_MESSAGES=${NUMBER_MESSAGES}
      - TOPIC=${TOPIC}
    networks:
      - kafka-connect-net




  # trino:
  #   image: trinodb/trino:445
  #   hostname: trino
  #   container_name: trino
  #   depends_on:
  #     - rest
  #     - minio
  #   ports:
  #     - "8080:8080"
  #   networks:
  #     - kafka-connect-net
  #   volumes:
  #     - ./trino-config/etc/trino/catalog:/etc/trino/catalog

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   hostname: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ../monitoring/prometheus:/etc/prometheus
  #   command:
  #     - --config.file=/etc/prometheus/prometheus.yml
  #   networks:
  #     - kafka-connect-net

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ../monitoring/grafana/provisioning/:/etc/grafana/provisioning
  #   environment:
  #     - "GF_SECURITY_ADMIN_USER=admin"
  #     - "GF_SECURITY_ADMIN_PASSWORD=password"
  #     - "GF_USERS_ALLOW_SIGN_UP=false"
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - kafka-connect-net